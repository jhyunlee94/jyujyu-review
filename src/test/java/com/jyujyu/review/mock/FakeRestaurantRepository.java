package com.jyujyu.review.mock;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

import com.jyujyu.review.domain.Restaurant;
import com.jyujyu.review.service.port.RestaurantRepository;

public class FakeRestaurantRepository implements RestaurantRepository {

	private final AtomicLong autoGeneratedId = new AtomicLong(0);

	// 소형테스트는 동기화가 필요없는데 진행
	private final List<Restaurant> data = Collections.synchronizedList(new ArrayList<>());

	// @Override
	// public List<Restaurant> getRestaurants() {
	// 	return new ArrayList<>(data);
	// }

	@Override
	public Restaurant save(Restaurant restaurant) {
		// long 이 wrapper type 이여서 null 을 앞으로 옮겨줄게요
		if (restaurant.getId() == null || restaurant.getId() == 0) {
			Restaurant newRestaurant = Restaurant.builder()
				.id(autoGeneratedId.incrementAndGet())
				.address(restaurant.getAddress())
				.name(restaurant.getName())
				.updateAt(restaurant.getUpdateAt())
				.createAt(restaurant.getCreateAt())
				.build();
			data.add(newRestaurant);
			return newRestaurant;
		} else {
			// data.removeIf(item -> item.getId() == user.getId());
			data.removeIf(item -> Objects.equals(item.getId(), restaurant.getId()));
			data.add(restaurant);
			return restaurant;
		}

	}

}
